/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package leetcode;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

class RemoveElementTest {
    @Test
    void example1() {
        // setup
        RemoveElement sol = new RemoveElement();
        int[] input = { 3, 2, 2, 3 };
        int val = 3;
        int[] expected = { 2, 2 };
        // execute
        int actual = sol.removeElement(input, val);
        sort(input, 0, actual);
        sort(expected, 0, actual);
        // verify
        assertEquals(2, actual);
        assertArrayCustom(expected, input, actual);
    }

    @Test
    void example2() {
        // setup
        RemoveElement sol = new RemoveElement();
        int[] input = { 0, 1, 2, 2, 3, 0, 4, 2 };
        int val = 2;
        int[] expected = { 0, 1, 4, 0, 3 };
        // execute
        int actual = sol.removeElement(input, val);
        sort(input, 0, actual);
        sort(expected, 0, actual);
        // verify
        assertEquals(5, actual);
        assertArrayCustom(expected, input, actual);
    }

    @Test
    void example3() {
        // setup
        RemoveElement sol = new RemoveElement();
        int[] input = {};
        int val = 2;
        int[] expected = {};
        // execute
        int actual = sol.removeElement(input, val);
        sort(input, 0, actual);
        sort(expected, 0, actual);
        // verify
        assertEquals(0, actual);
        assertArrayCustom(expected, input, actual);
    }

    private void sort(int[] input, int begining, int ending) {
        List<Integer> inputList = new ArrayList<>();
        for (int i = begining; i < ending; i++) {
            inputList.add(input[i]);
        }
        inputList = inputList.stream().sorted().collect(Collectors.toList());
        for (int i = begining; i < ending; i++) {
            input[i] = inputList.get(i - begining);
        }
    }

    private void assertArrayCustom(int[] expected, int[] actual, int limit) {
        for (int i = 0; i < limit; i++) {
            assertEquals(actual[i], expected[i]);
        }
    }
}
